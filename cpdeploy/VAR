#!/bin/bash
# you need to configure the following settings to match your setup
##################################################################
# define an availiability zone for west and east to put the vpc
# you can check availability zones with 'checkaz <east or west>' 
# pick anyone, just make sure you find one spot for west and one for east

wgwaz="us-west-1a"
egwaz="us-east-1a"

# image sizing
# gw m4.large is the smallest gw you should have at 2 cores and 4G
# m3.medium at 1 core and 4gig ram is avaialble
# gw c4.2xlarge is recommended with 8 cores and 16G ram
# gw c4.xlarge with 4 core and 8G should be sufficent for most testing
# c4.8xlarge with 36 cores and 60G if your insane. 

gwinstancetype="m4.large"

# You would think its a good idea to have a bigger app 
# than client size, since you can swarm the app
# and it becomes the bottleneck . . unless thats what you want to test :)
# this setup will overwhelm the gateway, testing the limits.

appinstancetype="m4.large"
client_instancetype="m4.large"

# since the client tester is not part of our vpc, it will be 
# sent to eventually die, in the default subnet of death. 
# set a subnet for them in each east and west region

eclient_subnetid="subnet-7bc84e22"
wclient_subnetid="subnet-4cf25529"

# r80 rest api credentials and settings to automate the creation and destruction of gateways
# this is the account for the api calls
# along with the hostname/IP of the manager if you already have one
# otherwise this is used for your dashboard user/pass 
# Stay away from admin, reserved for control plane on gw

username="gwadmin"
password="TheRainInSpain"
host="smc.gwinthesky.net"

# set sic for your gateways (this also sets init script)

otp="avpn1234"

# region for the management station 

mgregion="us-east-1"
# I prefer 8 core and 32 gig of ram for management
# It's a pet, it shouldn't be here ; for best performance
# give it dedicated iops of 800 or above. . . $$$$

mginstancetype="m4.2xlarge"

# specify the availability zone (checkaz script in gw dir can help) 

mgplacement="us-east-1e"

# specify a security group in region/az above

mgsecgroup="sg-4be27c2f"

# specify a subnet to place the management in your region/az above

mgsubnetid="subnet-7bcb9e41"

# aws is so much easier with a hosted zone in route53
# turn on dns resolving with 'true' or false if there is no hosted zone

use_dns="true"

# set your domain to use if use_dns is true, see route53 service to get a domain

domain="gwinthesky.net"

# set your domain and hosted zone ID, find this in the route53 aws page

hostedid="Z7YST92MKEJQJ"

# name of your ssh key for access to the instance
# wkeyname is your key in us-west-1 and ekeyname is looking for us-east-1
# you can still just put a name here, but by default we will try to
# use the shell control with a quick check.
# leave this part alone unless you know what it is doing
if [ -f ~/.ssh/mykey ] ; then
	wkeyname=(`cat ~/.ssh/mykey`)
	ekeyname=(`cat ~/.ssh/mykey`)
	else
# if you are using your own keys, set the names here
# leave the part above alone either way
# but if you use the shellcontrol it will override this
wkeyname="mykey"
ekeyname="mykey"
fi
# this is the host object and IP that are added to the poilcy
# for access to the gateways. normally you don't log in at all.
# for debug and testing only. set to your docker host if you are 
# not going to use it.

admin_host="home.killhup.cx"
admin_ip="99.253.4.27"

#
# you should be done setting any variables from here on out
# save this file and get back to the command line
# run 'showme' for a step through of the commands you can use.
# . . . nothing else to see here.
###############################################################
# proceed with caution
#
mgami="ami-3b15d556"
wgwami="ami-3b5e2e5b"
egwami="ami-a00e32ca"
wappami="ami-6e84fa0e"
eappami="ami-f5f41398"
eclientami="ami-f5f41398"
wclientami="ami-6e84fa0e"
# this is the region for azure gateways
azregion="eastus"
# area and subnet to launch test web clients 
# use your default VPC and subnets and you can map the client
# directly to the internet without protection. nothing open 
# in the client tester so don't worry.These are aggressive web clients, 
# be careful! They eat bandwidth and hammer sites relentlessly, 
# run for too long and expect an ugly bill (i know!)
eclient_region="us-east-1"
wclient_region="us-west-1"
# this will set the region for the vpc to launch in, 
# limited to us-east-1 or us-west-1 with the designation 
# of east or west in the command line.
# limited for no other reason then this is for testing, 
# not deployment, and I don't  have the cycles to index 
# every ami in every region
# unless you want to change regions (and ami) dont touch this part
wgwregion="us-west-1"
egwregion="us-east-1"
# should be the same as gwregion so it launches in a secured subnet as a common
# workload.
wappregion="us-west-1"
eappregion="us-east-1"
# global locations
# not a good idea to muck with this
# unless you know what you are doing
wd="/cpdeploy"
app="$wd/app"
gw="$wd/gw"
api="$gw/api"
mg="$wd/mg"
# init files for the various systems
# shouldnt change unless you have your own
mgheadinit="$mg/init/mg-head.init"
mginit_launch="$mg/init/mg-cloud-init"
appinit_launch="$app/init/cloud-init"
azappinit_launch="$app/init/azcloud-init"
client_init="$app/init/client-init"
client_head="$app/init/client-head"
client_tail="$app/init/client-tail"
apphead="$app/init/head.init"
azapphead="$app/init/azhead.init"
apptail="$app/init/tail.init"
azapptail="$app/init/aztail.init"
gwheadinit="$gw/init/gw-head.init"
gwinit_launch="$gw/init/gw-cloud-init"
gwinit="$gw/init"
azinit="$gw/init/azure"
dns="$gw/init/dnsrecord"
# aws command
cmd="aws ec2"
# location for data output on cattle state
# got to keep the records for the farm somewhere
# dont change this, information for deployment is
# stored here.
mgout="$mg/output"
gwout="$gw/output"
aplb="$gwout/app-lb.json"
appout="$gwout"
out="$gwout"
# disk configurations
# you dont need to change this.
mgdisk="$mg/init/mg-hdd.json"
appdisk="$app/init/app-hdd.json"
client_disk="$app/init/client-hdd.json"
gwdisk="$gw/init/gw-hdd.json"
#
# make sure we have a path
#PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/cpdeploy:/cpdeploy/gw:/cpdeploy/app:/cpdeploy/mg:/cpdeploy/mg/api"
#
##################################################
##################################################
# DONE
