#!/bin/bash
# 
# test for input
#
if [ -z "$1" ]
  then
echo ""
    echo "give a name for the management station, like $0 greta"
    echo "You can call it whatever you want."
echo ""
exit
fi
#
# Set some system variables
source VAR
#
#
# launch script
# first we create the init file
#
echo "$0 on ${1}" >> /tmp/auto.job
rm -f ${mginit_launch}.gz
cat $mgheadinit > $mginit_launch
echo "echo \"hostname=\\\"${1}\\\"\" >> /home/admin/firstconfig" >> $mginit_launch
echo "echo \"mgmt_admin_name=\\\"${username}\\\"\" >> /home/admin/firstconfig" >> $mginit_launch
echo "echo \"mgmt_admin_passwd=\\\"${password}\\\"\" >> /home/admin/firstconfig" >> $mginit_launch
echo "config_system -f /home/admin/firstconfig" >> $mginit_launch
gzip $mginit_launch
#
# then we run the ec2 instance
#
$cmd run-instances --region $mgregion --image-id $mgami --key-name $ekeyname --security-group-ids $mgsecgroup --user-data fileb://${mginit_launch}.gz --instance-type $mginstancetype --placement AvailabilityZone=${mgplacement} --subnet-id $mgsubnetid --block-device-mappings file://${mgdisk} > ${mgout}/$1
#
echo "Initalizing."
#
Instance=$(awk '/InstanceId/ {print $2;}' ${mgout}/$1 | sed 's/"//g' | sed 's/,//g')
#
# tag the instances so we can identify it
#
$cmd create-tags --region $mgregion --tags Key=Name,Value=$1 --resources $Instance
echo "Tagging $Instance as $1"
echo "Waiting for public IP."
sleep 5
$cmd describe-instances --region $mgregion --instance-ids $Instance | grep PublicIpAddress > ${mgout}/${1}-pubip
sleep 5
blastoff=$(date)
#
# Set DNS record
#
IP=$(awk '/PublicIpAddress/ {print $2;}' ${mgout}/${1}-pubip | sed 's/"//g' | sed 's/,//g')
echo " $1 is $Instance using $IP on the internet"
if [ $use_dns = "true" ]
then
echo "dns injection to resolve $1 to $IP"
echo "{" > $dns
echo "      \"Comment\": \"${domain} DNS\"," >> $dns
echo "      \"Changes\": [" >> $dns
echo "      {" >> $dns
echo "\"Action\": \"CREATE\"," >> $dns
echo "\"ResourceRecordSet\": {" >> $dns
echo "\"Name\": \"${1}.${domain}\"," >> $dns
echo "\"Type\": \"A\"," >> $dns
echo "\"TTL\": 60," >> $dns
echo "\"ResourceRecords\": [" >> $dns
echo "     {" >> $dns
echo "\"Value\": \"$IP\"" >> $dns
echo "       }" >> $dns
echo "      ]" >> $dns
echo "     }" >> $dns
echo "    }" >> $dns
echo "   ]" >> $dns
echo "  }" >> $dns

aws route53 change-resource-record-sets --hosted-zone-id $hostedid --change-batch file://$dns
fi

#
# let the user know whats happened
#
echo " "
sleep 5
echo "Initalizing"
sleep 5
$cmd describe-instances --region $mgregion --instance-ids $Instance | grep Value
echo "$1 deployed"
#
# set launch time and cleanup before exit
#
land=$(date)
echo "$Instance launched at $blastoff, and should be landed in 30 minutes from $land"
echo ""
echo "Please leave the management station alone to self-configure."
echo " ElasticIP: $IP"
echo ""
echo "${1}.${domain} will be your R80 management station "
echo ""
echo " Login to management at ${1}.${domain}   credentials: ${username}/${password}"
echo " or if no dns is used,"
echo " ${IP} credentials: ${username}/${password}"
echo " "
#
echo "${1}.${domain} ($IP) " > ${mgout}/.access
echo " -> $0 COMMAND COMPLETED. || "
cat /tmp/auto.job | grep -v "$0 on ${1}" > /tmp/${1}.done
mv /tmp/${1}.done /tmp/auto.job
exit 0

