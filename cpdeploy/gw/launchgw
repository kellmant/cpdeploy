#!/bin/bash
# test for input
if [ -z "$1" ]
  then
echo ""
    echo "Just give the designation for the gateway, like $0 <vpcid>"
    echo "This will create the gateway to attach to the vpc of the same id."
echo ""
exit
fi

source VAR

if [ ! -d "${out}/${1}" ] ; then
echo "no vpc to attach the gateway, did you run prep-vpc ${1} first?"
echo ""
exit
fi
rm -rf ${gwinit_launch}.gz
echo "$0 on ${1}" >> /tmp/auto.job

gwregion=(`cat ${out}/${1}/region`)
subid=(`cat ${out}/${1}/id`)

echo "region set to: $gwregion"
if [ "$gwregion" = "us-east-1" ] 
then
ami="$egwami" 
keyname="$ekeyname"
else
# if region is west
ami="$wgwami"
keyname="$wkeyname"
fi
# here we go
echo "Create gw $1"
cat $gwheadinit > $gwinit_launch
echo "clish -c 'set interface eth1 ipv4-address 10.0.${subid}.10 mask-length 25' -s" >> $gwinit_launch
echo "clish -c 'set interface eth1 state on' -s" >> $gwinit_launch
echo "echo \"hostname=\\\"gw-${1}\\\"\" >> /home/admin/firstconfig" >> $gwinit_launch
echo "echo \"ftw_sic_key=\\\"${otp}\\\"\" >> /home/admin/firstconfig" >> $gwinit_launch
echo "config_system -f /home/admin/firstconfig" >> $gwinit_launch
echo "shutdown -r now" >> $gwinit_launch
gzip $gwinit_launch
# init script prepped, launch instance with it
# launch script
subnetid=$(awk '/SubnetId/ {print $2;}' ${out}/$1/subnet128 | sed 's/"//g' | sed 's/,//g')

$cmd run-instances --region $gwregion --image-id $ami --key-name $keyname --user-data fileb://${gwinit_launch}.gz --instance-type $gwinstancetype --subnet-id $subnetid --private-ip-address 10.0.${subid}.254 --block-device-mappings file://${gwdisk} > ${out}/${1}/${1}.json 
echo "Initalizing."
sleep 5
Instance=$(awk '/InstanceId/ {print $2;}' ${out}/$1/$1.json | sed 's/"//g' | sed 's/,//g')
ENI=$(awk '/NetworkInterfaceId/ {print $2;}' ${out}/$1/eth1 | sed 's/"//g' | sed 's/,//g')
sleep 3
$cmd create-tags --region $gwregion --tags Key=Name,Value=gw-${1} --resources $Instance
echo "Tagging $Instance as gw-${1}"
echo "Attaching additional network interface, please wait for init of image"
sleep 4
echo " /:"
sleep 3
echo " (: looking for an attachment id"
sleep 2
# if you are running an c8x size gateway you need to sleep 
# for 15 seconds to attach the interface.
# also, you are nuts. Scale wide not high.
#sleep 15
echo "attach network interface."
eth1=$(awk '/NetworkInterfaceId/ {print $2;}' ${out}/$1/eth1 | sed 's/"//g' | sed 's/,//g')
$cmd attach-network-interface --region $gwregion --network-interface-id $eth1 --instance-id $Instance --device-index 1
sleep 2
$cmd modify-network-interface-attribute --region $gwregion --network-interface-id $ENI --no-source-dest-check
sleep 2
$cmd modify-network-interface-attribute --region $gwregion --network-interface-id $eth1 --no-source-dest-check
echo "Waiting for public IP."
$cmd describe-instances --region $gwregion --instance-ids $Instance | grep PublicIpAddress
echo "Public IP confirmed"
$cmd describe-instances --region $gwregion --instance-ids $Instance | grep PublicIpAddress > ${out}/$1/pubip
IP=$(awk '/PublicIpAddress/ {print $2;}' ${out}/$1/pubip | sed 's/"//g' | sed 's/,//g')
echo " gw-$1 is $Instance using $IP on the internet"
if [ $use_dns = "true" ]
then
echo "dns injection to resolve ${1}.${domain} to $IP"
# Set DNS record
#
echo "{" > $dns
echo "      \"Comment\": \"${domain} DNS\"," >> $dns
echo "      \"Changes\": [" >> $dns
echo "      {" >> $dns
echo "\"Action\": \"CREATE\"," >> $dns
echo "\"ResourceRecordSet\": {" >> $dns
echo "\"Name\": \"${1}.${domain}\"," >> $dns
echo "\"Type\": \"A\"," >> $dns
echo "\"TTL\": 60," >> $dns
echo "\"ResourceRecords\": [" >> $dns
echo "     {" >> $dns
echo "\"Value\": \"$IP\"" >> $dns
echo "       }" >> $dns
echo "      ]" >> $dns
echo "     }" >> $dns
echo "    }" >> $dns
echo "   ]" >> $dns
echo "  }" >> $dns

aws route53 change-resource-record-sets --hosted-zone-id $hostedid --change-batch file://$dns
fi
blastoff=$(date)
echo "$Instance launched at $blastoff, gw-$1 security gateway services are being deployed."
echo "gw-$1 launched at $blastoff as instance $Instance " > ${out}/${1}/launchdate
echo " "
echo "gw-$1 deployed"
#rm -rf ${gwinit_launch}.gz

cat /tmp/auto.job | grep -v "$0 on ${1}" > /tmp/${1}.done
mv /tmp/${1}.done /tmp/auto.job
date > ${gwout}/${1}/.islaunched
echo " -> $0 ${1} COMMAND COMPLETE || "
gwstat $1 
exit 0
