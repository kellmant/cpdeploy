#!/bin/bash
#
. VAR
red='\033[1;31m'
yellow='\033[1;33m'
green='\033[1;32m'
blue='\033[1;34m'
cyan='\033[1;36m'
brown='\033[1;22m'
purple='\033[1;35m'
nc='\033[0m'
sctimer="1"
boldit="tput smso"
nobold="tput rmso"
cd /cpdeploy
if [ ! -f /tmp/auto.job ] ; then
	touch /tmp/auto.job
	fi
tput clear
stty cols 72
stty rows 38
#reset terminal to current state when we exit.
trap "stty echo icanon ; stty $(stty -g) ; tput reset" EXIT
#trap "tput sgr0 ; tput rmso ; stty echo icanon ; tput reset" EXIT

# Disable echo and special characters, set input timeout to 0.2 seconds.
stty -echo -icanon time 3 || exit $?

# String containing all keypresses.
KEYS=""

# Set field separator to BEL (should not occur in keypresses)
IFS=$'\a'

# Input loop.
while [ 1 ]; do
    # Read more input from keyboard when necessary.
    while read -t 0 ; do
        read -s -r -d "" -N 1 -t 0.5 CHAR && KEYS="$KEYS$CHAR" || break
    done
    # If no keys to process, wait 0.05 seconds and retry.
    if [ -z "$KEYS" ]; then
tput cup 0 0
#printf "\033[1;1H"
#        sleep 0.05
#printf "\033c"
# run console status right here instead of capture console_out=(`status`)
##
# console output starts here
##
if [[ $(tr -d "\r\n" < /tmp/auto.job |wc -c ) -eq 0 ]]  ; then
	system_status=" Idle. "
	job_status=" Nothing to do.        "
	status_color="${green}"
	else
	system_status=" * WORKING * "
	job_status=(`cat /tmp/auto.job | tr -d '\n'`)
	status_color="${red}"
	fi
eval tail -c 2048 /cpdeploy/debug.output | tr -s "\n" " || " | tac > /tmp/.console.out
debug_log=$( </tmp/.console.out)
debug_log=(`printf "%38s" ${debug_log} | tac`)
starttime=$(date)
echo "-------------------------------------------------------------------------"
eval $nobold
printf ${cyan}
printf "${starttime[@]}"  
printf ${nc}
tput el
printf " || Jobs: "
printf ${status_color[@]}
printf "${job_status[@]}"
printf ${nc}
echo ""
echo "-------------------------------------------------------------------------"
tput el
    printf "${green}VPCs online: ${nc} "
vpc_on=(`ls ${gwout}/*/natuids 2> /dev/null | cut -d/ -f5`)
vpc_on=(`echo ${vpc_on[@]} | tr "\n" " "`)
tput el
echo -n " ${vpc_on[@]}"
echo ""
tput el
	printf "${purple}standby VPCs: ${nc}"
vpc_off=(`ls ${gwout}/ 2> /dev/null | grep .nogw | cut -d. -f1`)
vpc_off=(`echo ${vpc_off[@]} | tr "\n" " "`)
echo -n  "${vpc_off[@]}"
echo ""
echo "-------------------------------------------------------------------------"
echo "-------------------------------------------------------------------------"
tput el
printf "${blue}Command${nc}       || Status:"
eval $boldit
tput el
printf "${status_color}${system_status[@]}"
eval $nobold
printf ${nc}
echo ""
echo "-------------------------------------------------------------------------"
tput el
	printf "${blue}('killgw') ${nc}   ||  ${green}gateways deployed: ${nc}"
gw_up=(`find ${gwout}/*/pubip -mmin +15 2> /dev/null | cut -d/ -f5`)
gw_up=(`echo ${gw_up[@]} | tr "\n" " "`)
tput el
echo -n "${gw_up[@]}"
echo ""
tput el
	printf "${blue}('launchgw') ${nc} ||  ${yellow}gateways coming online: ${nc}"
sec_init=(`find ${gwout}/*/pubip -mmin -16 2> /dev/null | cut -d/ -f5`)
sec_init=(`echo ${sec_init[@]} | tr "\n" " "`)
tput el
echo -n "${sec_init[@]}"
echo ""
echo "-------------------------------------------------------------------------"
tput el
	printf "${blue}('killapp') ${nc}  ||${green}  apps deployed: ${nc}"
app_active=(`find ${gwout}/*/app*.json -mmin +3 2> /dev/null | cut -d/ -f5 | cut -d. -f1`)
app_active=(`echo ${app_active[@]} | tr "\n" " "`)
tput el
echo -n "${app_active[@]}"
echo ""
tput el
	printf "${blue}('launchapp') ${nc}||${yellow}  apps coming online: ${nc}"
app_init=(`find ${gwout}/*/app*.json -mmin -3 2> /dev/null | cut -d/ -f6 | cut -d. -f1 | cut -d- -f2`)
app_init=(`echo ${app_init} | tr "\n" " "`)
tput el
echo -n "${app_init}"
echo ""
	printf "${nc}==============||${red}  apps terminated: ${nc}"
app_dead=(`ls -r ${gwout}/*/app*dead 2> /dev/null | cut -d/ -f5`)
app_dead=(`echo ${app_dead[@]} | tr "\n" " "`)
tput el
echo -n "${app_dead[@]}"
echo ""
site_status=(`cat ${app}/domain 2> /dev/null`)
printf ${green}
tput el
echo -n "               ${site_status[@]}"
printf ${nc}
echo ""
echo "-------------------------------------------------------------------------"
mg_up=(`find ${mgout}/*pubip -mmin +30 2> /dev/null | cut -d/ -f5 | cut -d- -f1`)
tput el
printf "${blue}('killmg') ${nc}   ||${green}  management:${nc}"
	if [ ! -z "$mg_up" ] ; then
mg_loc=(`cat $mgout/.access 2> /dev/null`)
filetime=$(date --utc -r ${mgout}/${mg_up}-pubip +%s)
epochtime=$(date --utc +%s)
mg_timer=$(expr ${epochtime} - ${filetime})
tput el
echo -n " ${mg_loc[@]}"
tput el
printf '%dh:%02dm' $((${mg_timer[@]}/3600)) $((${mg_timer[@]}%3600/60)) 
	else
tput el
echo -n "$host"
fi
echo ""
tput el
	printf "${blue}('launchmg') ${nc} ||${yellow}  management coming online: ${nc}"
mg_init=(`find ${mgout}/*pubip -mmin -31 2>/dev/null | cut -d '/' -f 5 | cut -d '-' -f 1`)
tput el
echo -n "${mg_init[@]}"
echo ""
echo "-------------------------------------------------------------------------"
tput el
	printf "${blue}('die') ${nc}      || ${green} test clients deployed: ${nc}"
client_active=(`find ${gwout}/client/*.json -mmin +2 2> /dev/null | cut -d/ -f6 | cut -d. -f1`)
client_active=(`echo ${client_active[@]} | tr "\n" " "`)
tput el
	echo -n "${client_active[@]}"
echo ""
tput el
	printf "${blue}('testclient')${nc}||${yellow}  test clients coming online: ${nc}"
client_init=(`find ${gwout}/client/*.json -mmin -3 2> /dev/null | cut -d/ -f6 | cut -d. -f1 | tr "\n" " "`)
tput el
echo -n "${client_init[@]}"
echo ""
tput ed
echo "================================ CONSOLE LOGS ==========================="
conout=$(printf "%1s" ${debug_log:(-499)})
echo -n "$conout" > /tmp/.msg
logform=$(fold -w 72 /tmp/.msg)
tput el
printf "%-72s" $logform
printf ${cyan}
printf "%1s" "<=out"
printf ${nc}
tput el
echo ""
tput el
echo "________________________________________________________________________"
tput el
echo "|    Press Esc to quit. Enter for commandline. CPdeploy Console 1.2    |"
tput el
echo "-------------------------------eof--------------------------------------"
printf ${status_color[@]}
eval ${boldit}
tput el
echo ".                                                                      ."
	sleep 1
if [ $sctimer -gt 6 ] ; then
	sctimer="1"
	tput cup 0 0 
else
((sctimer++))	
tput ed
fi
        continue
    fi

    # Check the first (next) keypress in the buffer.
    case "$KEYS" in
      $'d'*) # activate
	KEY="${KEYS:0:1}"
        KEYS="${KEYS#?}"
	tput sc
	printf ${nobold}
	printf ${yellow}
	tput clear
	tput cup 36 0 
        echo "You found the secret 'd'eploy key! "
        echo "This will auto deploy a single VPC for you."
	stty echo icanon
	read -p "Want to Create vpc, launch gw and start app automagically?(y/n) " justdoit
		if [ "$justdoit" = "y" ] ; then
	read -p "VPC unique subnet id?(0-254): " subid
	read -p "VPC location?(east/west): " sitespot
	read -p "VPC name?: " vpcon	
	echo " Bringing ${vpcon[@]} online."
	vpcactivate="nohup spinup ${subid[@]} ${sitespot[@]} ${vpcon[@]}"
	eval ${vpcactivate[@]} >> /cpdeploy/debug.output &
	stty -echo -icanon
tput rc
		fi
	stty -echo -icanon
tput rc

        ;;
      $'k'*) # kill
	KEY="${KEYS:0:1}"
        KEYS="${KEYS#?}"
	tput sc
	printf ${nobold}
	printf ${red}
	tput cup 36 0 
	stty echo icanon
	read -p "Kill active VPC? (y/n) " justkillit	
		if [ "$justkillit" = "y" ] ; then
	read -p "Active VPC name to be killed?: " vpcoff
	echo " Taking ${vpcoff[@]} offline."
	vpcdeactivate="nohup spindown ${vpcoff[@]}"
	eval ${vpcdeactivate[@]} >> /cpdeploy/debug.output &
	stty -echo -icanon
tput rc
		fi
	stty -echo -icanon
tput rc
        ;;
      $'a'*) # activate
	KEY="${KEYS:0:1}"
        KEYS="${KEYS#?}"
	tput sc
	tput clear
	tput cup 36 0 
	stty echo icanon
	printf "${yellow}"
        echo "You found the secret 'a'utodeploy key! "
        echo " Feel like trying the gateways in the sky project?"
	read -p "Do you dare? this could get messy. (y/n)" justdone
		if [ "$justdone" = "y" ] ; then
	read -p "How many? (2 min-? ): " howmany
	read -p "VPC name prefix?: " vpcnames
	echo " Bringing ${howmany[@]}} ${vpcnames[@]} sites online."
	vpcsuperactivate="nohup autodeploy ${howmany} ${vpcnames}"
	eval ${vpcsuperactivate[@]} >> /cpdeploy/debug.output &
	stty -echo -icanon
tput rc
		fi
	stty -echo -icanon
tput rc
        ;;
      $'\n'*|$'\r'*) # Enter/Return
        KEYS="${KEYS##?}"
	tput sc
	tput cup 38 0 
	stty echo icanon
	printf ${yellow}
	read -p "Command to run: " cmd	
	if [ "$cmd" = "clear" ] ; then
		echo "" > /cpdeploy/debug.output
		tput clear
		cat /cpdeploy/help > /cpdeploy/debug.output
		elif [ "$cmd" = "cpconfig" ] ; then
		echo " . . . Editing Config file . . . " >> /cpdeploy/debug.output
		stty echo icanon
		nano /cpdeploy/VAR
		stty -echo -icanon
		elif [ "$cmd" = "gwctl" ] ; then
		echo -n "Gw or Mg name? (without domain): " 
	        read -p "" gwctl	
		echo ""
		echo -n "remote command to run?: " 
	        read -p "" cmdctl	
		cmd="gwctl ${gwctl} \"${cmdctl[@]}\""
	printf "${blue}||${nc}" >> /cpdeploy/debug.output
	printf "${cyan}run:${green}${gwctl}->${nc}" >> /cpdeploy/debug.output
	gwcmdsent="nohup ${cmd[@]}"
	eval ${gwcmdsent[@]} >> /cpdeploy/debug.output 2>> /cpdeploy/debug.output &
		elif [ "$cmd" = "viconfig" ] ; then
		echo " . . . Editing Config file . . . " >> /cpdeploy/debug.output
		stty echo icanon
		vim /cpdeploy/VAR
		stty -echo -icanon
		elif [ "$cmd" = "helpme" ] ; then
		cat /cpdeploy/help >> /cpdeploy/debug.output
		elif [ "$cmd" = "help" ] ; then
		cat /cpdeploy/help >> /cpdeploy/debug.output
		elif [ "$cmd" = "showme" ] ; then
		cat /cpdeploy/help >> /cpdeploy/debug.output
		elif [ -n "$cmd" ] ; then
	printf "${blue}||${nc}" >> /cpdeploy/debug.output
	printf "${cyan}run:${green}${cmd}->${nc}" >> /cpdeploy/debug.output
	nokillcmd="nohup ${cmd[@]}"
	eval ${nokillcmd[@]} >> /cpdeploy/debug.output 2>> /cpdeploy/debug.output &
	stty -echo -icanon
tput rc
	else
	stty -echo -icanon
tput rc
	fi
	stty -echo -icanon
tput rc

        ;;
      $'\t'*) # Tab
        KEYS="${KEYS##?}"
	tput sc
        echo "Tab"
	tput rc
        ;;
      $'\x1B') # Esc (without anything following!)
        KEYS="${KEYS##?}"
	tput sc
	stty echo icanon
	tput reset
	tput cup 36 0 
        echo "Esc - Quitting"
	echo "Use 'console' to return."
	echo ""
        exit 0
        ;;
      $'q') # quit (without anything following!)
        KEY="${KEYS:0:1}"
        KEYS="${KEYS#?}"
	tput sc
	tput cup 36 0 
        stty echo icanon
        read -p "Quit the console? (y/n) " keyquit
	if [ "$keyquit" == "y" ] ; then
		tput reset
		echo "When the going gets tough. . . "
		echo "The tough hit 'q' key and then 'y'."
		echo "Use '.console' to return."
		echo ""
		exit 0
	fi
        stty -echo -icanon
        echo "Back at it then!"
	tput rc
        ;;
      $'c') # clear (without anything following!)
        KEY="${KEYS:0:1}"
        KEYS="${KEYS#?}"
	tput clear
        ;;
      $'\x1B'*) # Unknown escape sequences
	tput sc
        echo -n "Unknown escape sequence (${#KEYS} chars): \$'"
        echo -n "$KEYS" | od --width=256 -t x1 | sed -e '2,99 d; s|^[0-9A-Fa-f]* ||; s| |\\x|g; s|$|'"'|"
        KEYS=""
	tput rc
        ;;
      [$'\x01'-$'\x1F'$'\x7F']*) # Consume control characters
        KEYS="${KEYS##?}"
        ;;
      *) # Printable characters.
        KEY="${KEYS:0:1}"
        KEYS="${KEYS#?}"
        ;;
    esac
done
